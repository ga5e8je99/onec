const express = require('express');
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

// الاتصال بقاعدة بيانات MongoDB
mongoose.connect('mongodb://localhost/adminEcommerce', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => {
  console.log('Connected to MongoDB');
}).catch(err => {
  console.error('Error connecting to MongoDB:', err);
});

// تعريف مخطط المستخدم
const userSchema = new mongoose.Schema({
  name: String,
  email: { type: String, unique: true },
  password: String,
});

const User = mongoose.model('User', userSchema);

// API للتسجيل
app.post('/api/register', async (req, res) => {
  const { name, email, password } = req.body;

  // التحقق من صحة البيانات
  if (!name || !email || !password) {
    return res.status(400).json({ success: false, message: 'All fields are required' });
  }

  try {
    // تحقق من وجود المستخدم في قاعدة البيانات
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ success: false, message: 'Email already exists' });
    }

    // تشفير كلمة المرور
    const hashedPassword = await bcrypt.hash(password, 10);

    // إنشاء المستخدم
    const user = new User({
      name,
      email,
      password: hashedPassword,
    });

    // حفظ المستخدم في قاعدة البيانات
    await user.save();
    res.json({ success: true, message: 'User registered successfully!' });

  } catch (err) {
    console.error("Error during registration:", err);
    res.status(500).json({ success: false, message: 'Error registering user' });
  }
});

// API لتسجيل الدخول
app.post('/api/login', async (req, res) => {
  const { email, password } = req.body;

  // البحث عن المستخدم
  const user = await User.findOne({ email });
  if (!user) {
    return res.status(400).json({ success: false, message: 'User not found' });
  }

  // التحقق من صحة كلمة المرور
  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) {
    return res.status(400).json({ success: false, message: 'Invalid credentials' });
  }

  // إنشاء التوكن JWT
  const token = jwt.sign({ userId: user._id }, 'secretKey', { expiresIn: '1h' });

  // إرسال التوكن للمستخدم
  res.json({ success: true, message: 'Login successful', token });
});

// بدء السيرفر
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
